package nl.circulairtriangles.controller;

import nl.circulairtriangles.scanner.LoginActivity;
import nl.circulairtriangles.scanner.MainActivity;
import nl.circulairtriangles.scanner.R;
import android.app.AlertDialog;
import android.content.Intent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;

public class LoginActivityController implements OnClickListener {

	private LoginActivity view;
	public LoginActivityController(LoginActivity view) {
		this.view = view;
	}

	@Override
	public void onClick(View v) {
        switch(v.getId()) {
	        case R.id.loginButtonButton:
	        	login(); 
	        break;
        }	
	}
	
	/**
	 * Function for logging in. Called when clicking the login button.
	 */
	private void login(){
		EditText userNameEditText = (EditText) view.findViewById(R.id.loginUserNameEditText);
		EditText passwordEditText = (EditText) view.findViewById(R.id.loginPasswordEditText);
		String userName = userNameEditText.getText().toString();
		String password = passwordEditText.getText().toString();
		
		// Input checks, remove this to skip checking username/password length
		
		// Check if fields are empty
		if (userName.length() <= 0 || password.length() <= 0){
			AlertDialog.Builder builder = new AlertDialog.Builder(view);
			
			// Both fields are empty
			if (userName.length() <= 0 && password.length() <= 0){	
				builder.setMessage(R.string.login_empty_userName_password);
			}
			
			// User name must not be empty
			else if (userName.length() <= 0)
			{
				builder.setMessage(R.string.login_empty_userName);
			}
			
			// Password must not be empty
			else if (password.length() <= 0)
			{
				builder.setMessage(R.string.login_empty_password);
			}
			
			builder.setPositiveButton(R.string.ok, null);
			builder.show();
			return;
		}
		
		// Login
		performLoginRequest(userName, password);
	}
	
	/**
	 * Performs a RESTful request to the server
	 */	
	protected void performLoginRequest(String userName, String password){
		view.startActivity(new Intent(view, MainActivity.class));
		view.finish();
	}
	
	/*protected void performLoginRequest(String userName, String password)
	{
		// Store these user credentials in the user class
		user = new User(userName, password, (String) null, pin, 0);
		
		// Create new RESTRequest instance and fill it with user data
		RESTRequest restRequest = new RESTRequest(Config.REST_REQUEST_BASE_URL + Config.REST_REQUEST_LOGIN, LOGIN_EVENT_ID);
		
		restRequest.putString("username", userName);
		restRequest.putString("password", password);
		
		restRequest.addEventListener(this);
		
		// Send an asynchronous RESTful request
		restRequest.execute();
	}

	@Override
	public void RESTRequestOnPreExecute(RESTRequestEvent event)
	{
		progressDialog = new ProgressDialog(this);
		progressDialog.setTitle(getResources().getString(R.string.loading));
		progressDialog.show();
	}

	@Override
	public void RESTRequestOnPostExecute(RESTRequestEvent event)
	{
		progressDialog.dismiss();
		
		if (LOGIN_EVENT_ID.equals(event.getID()))
		{
			handleRESTRequestLoginEvent(event);
		}
	}
	*/
	
	/**
	 * @param event
	 */
	/*
	private void handleRESTRequestLoginEvent(RESTRequestEvent event)
	{
		String result = event.getResult();
		
		// Check if the returned string isn't an error generated by the REST class
		if (RESTRequest.isExceptionCode(result))
		{
			Toast.makeText(this, getString(R.string.error_unknown_exception), Toast.LENGTH_SHORT).show();
			
			return;
		}
		
		try
		{
			// Parse JSON
			JSONObject jsonObject = new JSONObject(result);
			
			String message   = jsonObject.getString("message");

			// Show a message when user is blocked
			if ("blocked".equals(message))
			{
				AlertDialog.Builder builder = new AlertDialog.Builder(LoginActivity.this);

				builder.setTitle(R.string.login_failed);
				builder.setMessage(R.string.login_blocked);
				builder.setPositiveButton(R.string.ok, null);
				builder.show();
				
				return;
			}
			
			String sessionID = jsonObject.getString("sessionID");
			int userType     = jsonObject.getInt("userType");
			
			// Message should be equal to success and sessionID should be available to be logged in successfully
			if (!"success".equals(message) ||
				sessionID == null ||
				sessionID.length() <= 0)
			{
				Toast.makeText(getApplicationContext(), getResources().getString(R.string.rest_not_found), Toast.LENGTH_SHORT).show();
				
				return;
			}
			
			user.setSessionID(sessionID);
			user.setType(userType);
		}
		catch (JSONException e) { }
		
		// Correct login, start main activity
		if (user.isLoggedIn())
		{
			SharedPreferencesHelper.storeUser(this, user);
			
			CurrentUser.setCurrentUser(user);
			
			startActivity(new Intent(this, MainActivity.class));
			
			finish();
		}
		else
		{
			String message = event.getMessageFromResult();
			
			// The server couldn't be reached, as no message is set
			if (message == null)
			{
				Toast.makeText(getApplicationContext(), getResources().getString(R.string.rest_not_found), Toast.LENGTH_SHORT).show();
			}
			// The server did not accept the passed user credentials
			else
			{
				AlertDialog.Builder builder = new AlertDialog.Builder(LoginActivity.this);

				builder.setTitle(R.string.login_failed);
				builder.setMessage(R.string.login_wrong_credentials);
				builder.setPositiveButton(R.string.ok, null);			
				builder.show();
			}
		}
	}*/
	
}
